<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Circle Game</title>
  <style>
    body, html {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background-color: #333;
    }

    canvas {
      background-color: #fff;
    }

    #inventory {
      position: absolute;
      bottom: 10px;
      right: 10px;
      display: none;
      background: rgba(255, 255, 255, 0.9);
      border: 1px solid #000;
      padding: 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    .item {
      width: 40px;
      height: 40px;
      border: 1px solid #000;
      margin: 5px;
      display: inline-block;
      position: relative;
      background-color: #e0e0e0;
      text-align: center;
      line-height: 40px;
      font-size: 14px;
      cursor: pointer;
    }

    #inventoryButton {
      position: absolute;
      bottom: 10px;
      right: 80px;
      padding: 10px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    #closeInventory {
      margin-top: 10px;
      padding: 5px;
      background: #dc3545;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    #gameOverOverlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      color: white;
      display: none;
      justify-content: center;
      align-items: center;
      font-size: 32px;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas" width="500" height="500"></canvas>
  <button id="inventoryButton">Инвентарь</button>
  <div id="inventory">
    <div class="item" id="medkit" title="Аптечка">Аптечка</div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <button id="closeInventory">Закрыть</button>
  </div>
  <div id="gameOverOverlay">Вас убили</div>

  <script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');

    const hero = {
      x: 250,
      y: 250,
      radius: 20,
      color: 'blue',
      speed: 2,
      health: 5,
      maxHealth: 5,
      attackRadius: 150,
      target: { x: 250, y: 250 },
      lastShotTime: 0
    };

    const enemies = [];
    const heroBullets = [];
    const enemyBullets = [];
    const bulletCooldown = 500;

    function createEnemies(numEnemies) {
      for (let i = 0; i < numEnemies; i++) {
        const enemy = {
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          radius: 20,
          color: 'red',
          speed: 1.5,
          health: 3,
          attackRadius: 150,
          lastShotTime: 0
        };
        enemies.push(enemy);
      }
    }

    function updateHeroPosition() {
      const dx = hero.target.x - hero.x;
      const dy = hero.target.y - hero.y;
      const distance = Math.sqrt(dx * dx + dy * dy);

      if (distance > 1) {
        hero.x += (dx / distance) * hero.speed;
        hero.y += (dy / distance) * hero.speed;
      }
    }

    function drawHero() {
      if (hero.health > 0) {
        ctx.beginPath();
        ctx.arc(hero.x, hero.y, hero.radius, 0, Math.PI * 2);
        ctx.fillStyle = hero.color;
        ctx.fill();
        ctx.closePath();
      }
    }

    function drawEnemies() {
      enemies.forEach(enemy => {
        ctx.beginPath();
        ctx.arc(enemy.x, enemy.y, enemy.radius, 0, Math.PI * 2);
        ctx.fillStyle = enemy.color;
        ctx.fill();
        ctx.closePath();
      });
    }

    function drawHealth() {
      ctx.font = '16px Arial';
      ctx.fillStyle = 'black';
      ctx.textAlign = 'left';
      ctx.fillText(`Health: ${hero.health}/${hero.maxHealth}`, 10, canvas.height - 10);
    }

    function shootBullet(shooter, targetX, targetY, bulletArray) {
      const angle = Math.atan2(targetY - shooter.y, targetX - shooter.x);
      const bullet = {
        x: shooter.x,
        y: shooter.y,
        radius: 5,
        color: 'yellow',
        dx: Math.cos(angle) * 4,
        dy: Math.sin(angle) * 4
      };
      bulletArray.push(bullet);
    }

    function updateBullets(bullets, targetArray) {
      bullets.forEach((bullet, bulletIndex) => {
        bullet.x += bullet.dx;
        bullet.y += bullet.dy;

        if (bullet.x < 0 || bullet.x > canvas.width || bullet.y < 0 || bullet.y > canvas.height) {
          bullets.splice(bulletIndex, 1);
        } else {
          targetArray.forEach((target, targetIndex) => {
            const distance = Math.hypot(bullet.x - target.x, bullet.y - target.y);

            if (distance < bullet.radius + target.radius) {
              target.health -= 1;
              bullets.splice(bulletIndex, 1);

              if (target.health <= 0) {
                targetArray.splice(targetIndex, 1);
                if (target === hero) {
                  showGameOver();
                }
              }
            }
          });
        }
      });
    }

    function drawBullets(bullets) {
      bullets.forEach(bullet => {
        ctx.beginPath();
        ctx.arc(bullet.x, bullet.y, bullet.radius, 0, Math.PI * 2);
        ctx.fillStyle = bullet.color;
        ctx.fill();
        ctx.closePath();
      });
    }

    function checkAttackRadius() {
      const currentTime = Date.now();

      enemies.forEach(enemy => {
        const distanceToHero = Math.hypot(hero.x - enemy.x, hero.y - enemy.y);

        if (distanceToHero <= hero.attackRadius && currentTime - hero.lastShotTime > bulletCooldown) {
          if (hero.health > 0) { // Проверяем, жив ли герой перед стрельбой
            shootBullet(hero, enemy.x, enemy.y, heroBullets);
            hero.lastShotTime = currentTime;
          }
        }

        if (distanceToHero <= enemy.attackRadius && currentTime - enemy.lastShotTime > bulletCooldown) {
          if (enemy.health > 0) { // Проверяем, жив ли враг перед стрельбой
            shootBullet(enemy, hero.x, hero.y, enemyBullets);
            enemy.lastShotTime = currentTime;
          }
        }
      });
    }

    canvas.addEventListener('click', (event) => {
      hero.target.x = event.clientX - canvas.getBoundingClientRect().left;
      hero.target.y = event.clientY - canvas.getBoundingClientRect().top;
    });

    document.getElementById('inventoryButton').addEventListener('click', () => {
      const inventory = document.getElementById('inventory');
      inventory.style.display = (inventory.style.display === 'none' || inventory.style.display === '') ? 'block' : 'none';
    });

    document.getElementById('closeInventory').addEventListener('click', () => {
      document.getElementById('inventory').style.display = 'none';
    });

    document.getElementById('medkit').addEventListener('contextmenu', (event) => {
      event.preventDefault(); // предотвращаем стандартное меню контекстного клика
      if (hero.health < hero.maxHealth) {
        hero.health = hero.maxHealth; // восстанавливаем здоровье героя
        alert('Здоровье полностью восстановлено!');
        // Убираем аптечку из инвентаря
        document.getElementById('medkit').style.display = 'none';
      }
    });

    function showGameOver() {
      const overlay = document.getElementById('gameOverOverlay');
      overlay.style.display = 'flex';
      hero.health = 0; // Устанавливаем здоровье героя на 0
      // Останавливаем все пули
      heroBullets.length = 0;
      enemyBullets.length = 0; // Останавливаем пули врагов
    }

    function gameLoop() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawHero();
      drawEnemies();
      drawHealth();
      updateHeroPosition();

      if (hero.health > 0) {
        checkAttackRadius(); // Проверяем радиус атаки, если герой жив
        updateBullets(heroBullets, enemies);
        updateBullets(enemyBullets, [hero]);
      }

      drawBullets(heroBullets);
      drawBullets(enemyBullets);

      requestAnimationFrame(gameLoop);
    }

    createEnemies(5);
    gameLoop();
  </script>
</body>
</html>
